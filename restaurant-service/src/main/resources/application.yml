# RESTAURANT SERVICE CONFIGURATION

server:
  port: 8081

spring:
  application:
    name: restaurant-service
  
  # MySQL Database Configuration
  datasource:
    url: jdbc:mysql://localhost:3306/restaurant_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
    username: root
    password: Srinurajee@1999
    driver-class-name: com.mysql.cj.jdbc.Driver

  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: update  # Automatically creates/updates tables based on entities
    show-sql: true  # Shows SQL queries in console (useful for learning)
    properties:
      hibernate:
        format_sql: true  # Formats SQL for readability
        dialect: org.hibernate.dialect.MySQLDialect

  # Redis Cache Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 60000  # Connection timeout in milliseconds

  cache:
    type: redis
    redis:
      time-to-live: 600000  # Cache entries expire after 10 minutes (in ms)

# Eureka Client Configuration
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}

# Spring Boot Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env
  endpoint:
    health:
      show-details: always
  info:
    env:
      enabled: true

# Application Information
info:
  app:
    name: Restaurant Service
    description: Manages restaurants, menus, and food items with Redis caching
    version: 1.0.0
    port: 8081
    features:
      - Restaurant CRUD operations
      - Menu management
      - Redis caching for performance
      - Search by cuisine type

# Logging Configuration
logging:
  level:
    com.fooddelivery.restaurant: DEBUG
    org.hibernate.SQL: DEBUG
    org.springframework.cache: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
